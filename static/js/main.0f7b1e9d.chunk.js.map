{"version":3,"sources":["components/game/GameInformationProvider.js","components/game/GameTimer.js","components/game/AnswerResponse.js","components/game/GameScreen.js","components/game/GameSelect.js","components/game/GameCard.js","components/game/Leaderboard.js","components/game/Stats.js","components/ApplicationViews.js","components/auth/Auth.js","components/auth/Login.js","components/auth/Register.js","components/SonicSpot.js","reportWebVitals.js","index.js"],"names":["GameContext","createContext","GameInformationProvider","props","useState","categoryId","setCategoryId","albumUri","setAlbumUri","playerId","trackInfo","setTrackInfo","userName","setUserName","currentUserObject","setCurrentUserObject","games","setGames","localPlaylist","trackUri","playlistImage","setPlaylistImage","categoryName","setCategoryName","albumWriteup","setAlbumWriteup","currentImage","setCurrentImage","id","localStorage","getItem","history","useHistory","arrayOfUris","startTrack","deviceId","console","log","toker","myHeaders","Headers","append","requestOptions","method","headers","body","redirect","fetch","then","response","text","result","catch","error","getTrackInfo","json","artistName","item","artists","name","songName","uri","album","images","url","Provider","value","getUri","res","writeup","spotifyPlaylistUri","image","getPlayerIdStartPlayer","devices","push","nextTrack","getUserName","handleLogoutClick","setItem","getCurrentUserObject","currentUserId","setCurrentGameRecord","gameObject","JSON","stringify","score","category","userId","artistGuessCorrect","songGuessCorrect","avgAnswerTime","songsPlayed","getGames","getPlaylistAndShuffle","arr","items","map","currentSong","track","sort","Math","random","children","Timer","endGame","seconds","setSeconds","minutes","setMinutes","updateTime","useEffect","token","setTimeout","clearTimeout","Header","size","Icon","bordered","AnswerCard","artistResponse","songResponse","Message","fluid","style","backgroundColor","width","height","includes","color","fontSize","marginTop","postGamePlaylist","GameScreen","React","open1","setOpen1","open2","setOpen2","game","setGame","setSongResponse","setArtistResponse","currentScore","setCurrentScore","useContext","answerSong","answerArtist","answerState","setAnswerState","handleControlledInputChange","event","newAnswer","target","handleAnswerSubmit","results","userAnswer","Fuse","keys","includeScore","search","correctTrackAnswer","incorrectTrackAnswer","compareTrackAnswer","aresults","correctArtistAnswer","incorrectArtistAnswer","compareArtistAnswer","trackName","startPlayer","className","Menu","position","Item","onClick","Grid","Row","textAlign","verticalAlign","Column","maxWidth","dividing","centered","Container","Form","Segment","stacked","Input","focus","placeholder","onChange","Button","animated","preventDefault","Content","visible","hidden","Modal","onClose","onOpen","open","Image","src","wrapped","Description","Actions","content","labelPosition","icon","positive","class","uris","styles","activeColor","bgColor","loaderColor","sliderColor","sliderTrackColor","sliderHandleColor","trackArtistColor","trackNameColor","GameSelect","handleCatgoryChoice","x","columns","stackable","Card","ui","GameCard","Table","Cell","Leaderboard","sGames","a","b","GridColumn","padded","singleLine","HeaderCell","Body","slice","user","attached","basic","Stats","usersGames","filter","length","totalPoints","reduce","totalSongs","totalCorrectGuesses","artistCorrectGuesses","songCorrectGuesses","totalGuessPercentages","trunc","songGuessPercentages","artistGuessPercentages","fAverageScore","toFixed","sortedByScore","totalAnswers","userHighScore","userHighScoreCategory","mostPlayedCategoryId","nums","k","hash","num","Object","entries","parseInt","topKFrequent","mpc","Group","ApplicationViews","exact","path","SpotifyAuth","state","isAuthenticatedWithSpotify","handleRedirect","bind","possible","i","charAt","floor","hashParams","r","q","window","location","substring","e","exec","decodeURIComponent","params","this","getHashParams","access_token","storedState","setState","removeItem","alert","generateRandomString","encodeURIComponent","type","href","Component","Login","email","useRef","existDialog","loggedIn","setLoggedIn","spotifyLoggedIn","ref","current","close","as","onSubmit","exists","showModal","required","autoFocus","iconPosition","to","Register","firstName","lastName","conflictDialog","newUser","userExists","createdUser","hasOwnProperty","htmlFor","SonicSpot","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f7b1e9d.chunk.js","sourcesContent":["import React, { useState, createContext } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\n\r\n\r\nexport const GameContext = createContext()\r\n\r\n// Establsihing data to be used throughout, as well as spotify api navigation and spotify sdk navigation.\r\nexport const GameInformationProvider = (props) => {\r\n    //music genre/decade/band selected by user. use this to go to server and return spotify playlist uri\r\n    const [categoryId, setCategoryId] =  useState(0)\r\n    //spotify playlist uri\r\n    const [albumUri, setAlbumUri] = useState('')\r\n    //local instance of spotify player (sdk). Need this info to start player in beginning, but afterwards it will be the only player existing and unneeded info\r\n    const [playerId, setPlayerId] = useState('')\r\n    //track info currently playing. from spotiy api, used to compare answers\r\n    const [trackInfo, setTrackInfo] = useState([{}])\r\n    //currently logged in userName\r\n    const [userName, setUserName] = useState('')\r\n    //all data of currently logged in user\r\n    const [currentUserObject, setCurrentUserObject]=useState({})\r\n    //all games\r\n    const [games, setGames]=useState([])\r\n    //localplaylist creating an array of tracks and shuffling tracks to avoid the same playlist\r\n    const [localPlaylist, setLocalPlaylist]=useState([])\r\n    //individual song uri\r\n    const [trackUri, setTrackUri] =useState('')\r\n    //image presented at select menu and select confirm modal\r\n    const [playlistImage, setPlaylistImage]=useState('')\r\n    //name of category\r\n    const [categoryName, setCategoryName]=useState('')\r\n    //small writeup presented at select confirm screen\r\n    const [albumWriteup, setAlbumWriteup]=useState('')\r\n    //image of currently playing song. display at timer expiration\r\n    const [currentImage, setCurrentImage]=useState('')\r\n    \r\n    //user id of current user. held in local storage\r\n    let id = localStorage.getItem('sonic_user')\r\n    const history = useHistory()\r\n    let arrayOfUris = []\r\n    \r\n    //take category id(hard coded unique for each choice of game) go to server and return a spotify URI. set uri, name, playlist image and blurb\r\n    const getUri = (categoryId) => {\r\n        return fetch(`https://sonicserve.herokuapp.com/categories/${categoryId}`)\r\n        .then(res => res.json())\r\n        \r\n        .then(res => {\r\n          console.log(res.writeup);\r\n          setAlbumUri(res.spotifyPlaylistUri)\r\n          setCategoryName(res.name)\r\n          setPlaylistImage(res.image)\r\n          setAlbumWriteup(res.writeup)\r\n        })\r\n        .then(setCategoryId(categoryId))\r\n    }\r\n    \r\n    //createa local playlist\r\n    const getPlaylistAndShuffle = () =>{\r\n      var myHeaders = new Headers();\r\n      let toker = localStorage.getItem('spotifyAuthToken')\r\n          myHeaders.append(\"Authorization\", `Bearer ${toker}`);\r\n\r\n      var requestOptions = {\r\n        method: 'GET',\r\n        headers: myHeaders,\r\n        redirect: 'follow'\r\n      };\r\n    // return entire list of individual uris from selected spotify playlist and shuffle them                                           \r\n    return  fetch(`https://api.spotify.com/v1/playlists/${albumUri}/tracks?market=us&fields=items(track(uri))&limit=100`, requestOptions)\r\n        .then(response => response.json())\r\n        .then(res => {\r\n              let arr = res.items.map((currentSong) =>{\r\n            return(JSON.stringify(currentSong.track.uri))\r\n            })\r\n            arr = arr.sort(() => Math.random() - 0.5)\r\n            arrayOfUris =arr\r\n        })\r\n        .catch(error => history.push('./login'));\r\n      }\r\n\r\n//Call gets spotify sdk player id and uses that id to start album playback\r\n    const getPlayerIdStartPlayer = () => {\r\n    var myHeaders = new Headers();\r\n      let toker = localStorage.getItem('spotifyAuthToken')\r\n      myHeaders.append(\"Authorization\", `Bearer ${toker}`);\r\n\r\n      var requestOptions = {\r\n        method: 'GET',\r\n        headers: myHeaders,\r\n        redirect: 'follow'\r\n      };\r\n    \r\n      fetch(\"https://api.spotify.com/v1/me/player/devices\", requestOptions)\r\n        .then(response => response.json())\r\n        .then(result => startTrack(result.devices[0].id))\r\n        .then(getTrackInfo)\r\n        .catch(error => history.push('./login'))\r\n      }\r\n    \r\n\r\n    //holy shit stringify thank you thank you thank you!\r\n    //actual track start call. is called above in getPlayerIdStartPlayer\r\n    const startTrack = (deviceId) =>{\r\n      console.log(trackUri);\r\n      let toker = localStorage.getItem('spotifyAuthToken')\r\n      var myHeaders = new Headers();\r\n        \r\n        myHeaders.append(\"Authorization\",  `Bearer ${toker}`);\r\n        myHeaders.append(\"Content-Type\", \"text/plain\");\r\n        var raw = `{\\r\\n  \\\"uris\\\":[${arrayOfUris}]\\,\\r\\n  \\\"offset\\\": {\\r\\n    \\\"position\\\":0\\r\\n  },\\r\\n  \\\"position_ms\\\": 0\\r\\n}`;\r\n\r\n        var requestOptions = {\r\n          method: 'PUT',\r\n          headers: myHeaders,\r\n          body: raw,\r\n          redirect: 'follow'\r\n        };\r\n\r\n        fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, requestOptions)\r\n          .then(response => response.text())\r\n          .then(result => console.log(result))\r\n          .catch(error => console.log('error', error))\r\n          .then(getTrackInfo)\r\n    }\r\n    \r\n    const nextTrack = () =>{\r\n      var myHeaders = new Headers();\r\n      let toker = localStorage.getItem('spotifyAuthToken')\r\n      myHeaders.append(\"Authorization\", `Bearer ${toker}`);\r\n\r\n      var requestOptions = {\r\n        method: 'POST',\r\n        headers: myHeaders,\r\n        redirect: 'follow'\r\n      };\r\n\r\n      fetch(\"https://api.spotify.com/v1/me/player/next\", requestOptions)\r\n        .then(response => response.text())\r\n        .then(result => console.log(result))\r\n        .then(getTrackInfo)\r\n        .catch(error => console.log('error', error));\r\n    }\r\n\r\n    const getTrackInfo = () => {\r\n      var myHeaders = new Headers();\r\n        let toker = localStorage.getItem('spotifyAuthToken')\r\n        myHeaders.append(\"Authorization\", `Bearer ${toker}`);\r\n  \r\n        var requestOptions = {\r\n          method: 'GET',\r\n          headers: myHeaders,\r\n          redirect: 'follow'\r\n        };\r\n        fetch(\"https://api.spotify.com/v1/me/player/currently-playing\", requestOptions)\r\n          .then(response => response.json())\r\n          .then(result=>{\r\n            \r\n            setTrackInfo([{ artistName:result.item.artists[0].name, songName:result.item.name, uri:result.item.uri, }])\r\n            setCurrentImage(result.item.album.images[0].url)\r\n          })\r\n          \r\n    }\r\n    //take userid of localstorage and return current users userName\r\n    const getUserName = () =>{\r\n      \r\n      return fetch(`https://sonicserve.herokuapp.com/users/${id}`)\r\n        .then(res => res.json())\r\n        .then(res => res.userName)\r\n        .then(setUserName)\r\n    }\r\n    //on logout set user to undefined and go to login page\r\n    const handleLogoutClick = () =>{\r\n      localStorage.setItem('sonic_user', 'undefined')\r\n      localStorage.setItem('spotifyAuthToken', 'undefined')\r\n      history.push('/login')\r\n    }\r\n    //send id in localStorage and return current users dataObject\r\n    const getCurrentUserObject = (currentUserId)=>{\r\n     return fetch(`https://sonicserve.herokuapp.com/users/${currentUserId}`)\r\n        .then(res => res.json())\r\n        .then(setCurrentUserObject)\r\n    }\r\n    //upon end of game, send data object\r\n    const setCurrentGameRecord = (gameObject)=>{\r\n      fetch(\"https://sonicserve.herokuapp.com/games\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            score: gameObject.score,\r\n            categoryId: gameObject.category,\r\n            userId:gameObject.userId,\r\n            artistGuessCorrect: gameObject.artistGuessCorrect,\r\n            songGuessCorrect: gameObject.songGuessCorrect,\r\n            avgAnswerTime: gameObject.avgAnswerTime,\r\n            songsPlayed: gameObject.songsPlayed\r\n        })\r\n      })\r\n    }\r\n\r\n    //Get top 10 scores for Leaderboard\r\n    const getGames = () => {\r\n      return fetch(`https://sonicserve.herokuapp.com/games?_expand=user&_expand=category`)\r\n      .then(res => res.json())\r\n\r\n      .then(setGames)\r\n    }\r\n\r\n    return (\r\n        <GameContext.Provider value={{\r\n            getUri, categoryId, playerId, getPlayerIdStartPlayer, startTrack, nextTrack, getTrackInfo, trackInfo, getUserName, userName, handleLogoutClick, getCurrentUserObject, currentUserObject, setCurrentGameRecord, getGames, games, getPlaylistAndShuffle, localPlaylist, playlistImage, currentImage, categoryName, albumWriteup, \r\n        }}>\r\n            {props.children}\r\n        </GameContext.Provider>\r\n    )\r\n      \r\n}\r\n\r\n\r\n","import React, { useState, useEffect } from \"react\"\r\nimport { Icon, Header } from 'semantic-ui-react'\r\n\r\n\r\nexport const Timer = ({endGame}) =>{\r\n        //set timer duration here.\r\n        const [seconds, setSeconds] = useState(90)\r\n        const [minutes, setMinutes] = useState(0)\r\n        \r\n        function updateTime() {\r\n          if (minutes == 0 && seconds == 0) {\r\n            endGame()\r\n          }\r\n          else {\r\n            if (seconds == 0) {\r\n              setMinutes(minutes => minutes - 1);\r\n              setSeconds(59);\r\n            } else {\r\n              setSeconds(seconds => seconds - 1);\r\n            }\r\n          }\r\n          \r\n        }\r\n      \r\n        useEffect(() => {\r\n         const token = setTimeout(updateTime, 1000)\r\n      \r\n          return function cleanUp() {\r\n            clearTimeout(token);\r\n          }\r\n        })\r\n        return (\r\n            <>\r\n                <Header  size='huge'><Icon bordered name='clock outline' />Remaining: {seconds}</Header>\r\n            </>\r\n        )\r\n\r\n\r\n            \r\n}\r\n\r\n","import React from \"react\"\r\nimport { Header, Message } from 'semantic-ui-react'\r\n\r\n// If answer is correct (includes!) format accordingly\r\nexport function AnswerCard({artistResponse, songResponse}) {\r\n    return(\r\n        <>\r\n            <Message fluid\r\n                    style={{backgroundColor:'', width:830, height:50}}>{songResponse.includes('!')?<Header style={{color:'green', fontSize: 20}}>{songResponse}</Header>:<Header style={{color:'red', fontSize: 20}}>{songResponse}</Header>}\r\n            </Message>\r\n        \r\n            <Message\r\n            style={{backgroundColor:'', width:830, marginTop:20, height:50}}>{artistResponse.includes('!')?<Header style={{color:'green', fontSize: 20}}>{artistResponse}</Header>:<Header style={{color:'red', fontSize: 20}}>{artistResponse}</Header>}\r\n            </Message>\r\n       </> \r\n        \r\n    )\r\n}\r\n\r\n","import React, { useContext, useEffect, useState } from \"react\"\r\nimport { GameContext } from \"./GameInformationProvider\"\r\nimport SpotifyPlayer from 'react-spotify-web-playback';\r\nimport { useHistory} from \"react-router-dom\";\r\nimport {Timer} from \"./GameTimer\"\r\nimport { Form, Container, Modal, Button, Image, Header, Grid, Icon, Segment, Menu} from 'semantic-ui-react'\r\nimport { AnswerCard } from \"./AnswerResponse\";\r\nimport Fuse from 'fuse.js'\r\nimport './GameScreen.css'\r\n\r\nlet songsPlayed=0\r\n    let artistGuessCorrect=0\r\n    let songGuessCorrect=0\r\n    //later feature let avgAnswerTime\r\n    let postGamePlaylist=[]\r\n\r\nexport const GameScreen = () =>{\r\n    const history = useHistory();\r\n    //flag to control a modal\r\n    const [open1, setOpen1] = React.useState(false)\r\n    //flag to control a modal\r\n    const [open2, setOpen2] = React.useState(true)\r\n    //set a game object to state. Keeping track of game stats\r\n    const [game, setGame] = React.useState(false)\r\n    //determines the feedback a user recieves after guessing. right or wrong\r\n    const [songResponse, setSongResponse] = React.useState('')\r\n    const [artistResponse, setArtistResponse] = React.useState('')\r\n    //keeping current score in state\r\n    const [currentScore, setCurrentScore] = useState(0)\r\n    //get userOBject to set userName to gameObject\r\n    \r\n    \r\n    const {getPlayerIdStartPlayer,nextTrack,trackInfo,handleLogoutClick,setCurrentGameRecord,categoryId,currentUserObject,getPlaylistAndShuffle, categoryName, playlistImage, currentImage, albumWriteup}=useContext(GameContext)\r\n    //data that is being entered by user at form inputs is set to state\r\n    const [answerState, setAnswerState] = useState({\r\n      answerSong: '',\r\n      answerArtist: ''\r\n    })\r\n    //handling form inputs(user guess)\r\n    const handleControlledInputChange = (event) => {\r\n      const newAnswer = { ...answerState }\r\n      newAnswer[event.target.name] = event.target.value\r\n      setAnswerState(newAnswer)\r\n    }\r\n    //on submit, compare guesses to actual data// using Fuse Js package to allow close but not perfect responses/ see Fuse.JS for details. .40 is strictness, closer to 0 the stricter the answer must be\r\n    const compareTrackAnswer=(trackInfo,answerState )=>{\r\n      let userAnswer = answerState.answerSong\r\n      let results\r\n      songsPlayed+=1\r\n      let ftcorrectAnswer = new Fuse(trackInfo,{\r\n        keys:[\r\n          \"songName\"\r\n        ], includeScore:true\r\n      })\r\n      \r\n      results = ftcorrectAnswer.search(userAnswer)\r\n        if (results[0] && results[0].score < .40){\r\n          correctTrackAnswer()\r\n        }else{\r\n          incorrectTrackAnswer()\r\n        }\r\n    }\r\n    \r\n    //on submit, compare guesses to actual data    ***look into combining this and previous fx*****\r\n    const compareArtistAnswer=(trackInfo,answerState )=>{\r\n      \r\n      let userAnswer = answerState.answerArtist \r\n      let aresults\r\n      let facorrectAnswer = new Fuse(trackInfo,{\r\n        keys:[\r\n          'artistName'\r\n        ],includeScore:true\r\n      })   \r\n      aresults = facorrectAnswer.search(userAnswer)\r\n      if (aresults[0] && aresults[0].score < .40){\r\n        correctArtistAnswer()\r\n      }else{\r\n        incorrectArtistAnswer()\r\n      }\r\n    }\r\n    \r\n    const handleAnswerSubmit = () => {\r\n      compareTrackAnswer(trackInfo, answerState)\r\n      compareArtistAnswer(trackInfo, answerState)\r\n      //reset form to empty after guess submit\r\n      setAnswerState({\r\n          answerSong: '',\r\n          answerArtist: ''\r\n        });\r\n        postGamePlaylist.push({trackName:trackInfo[0].songName, artistName:trackInfo[0].artistName,uri: trackInfo})\r\n        console.log(postGamePlaylist);\r\n        nextTrack()\r\n      }\r\n      \r\n    const correctTrackAnswer = () =>{\r\n      setCurrentScore(currentScore => currentScore + 1)\r\n      setSongResponse(`Thats it!!!! the song is \"${trackInfo[0].songName}\". You earn 1 point!`)\r\n      songGuessCorrect+=1\r\n    }\r\n\r\n    const incorrectTrackAnswer = ()=>{\r\n      setSongResponse( `Better luck next time. The name of this song is \"${trackInfo[0].songName}\"`)\r\n    }\r\n    \r\n    const correctArtistAnswer = () =>{\r\n      setCurrentScore(currentScore => currentScore + 1)\r\n      setArtistResponse( `Thats it!!!! the song is by\"${trackInfo[0].artistName}\" You earn 1 point!`)\r\n      artistGuessCorrect+=1\r\n    }\r\n    \r\n    const incorrectArtistAnswer = ()=>{\r\n      setArtistResponse( `Wrong. That was a song by \"${trackInfo[0].artistName}\"`)\r\n    }\r\n\r\n    const startPlayer = () =>{\r\n      getPlayerIdStartPlayer()\r\n      songsPlayed+=1\r\n      console.log('here');\r\n    }\r\n\r\n    const endGame = () =>{\r\n      console.log('endgame');\r\n      \r\n      setOpen1(true)\r\n    }\r\n    // record game object on game end\r\n    const recordGame = () =>{\r\n      console.log('im runnign');\r\n      setCurrentGameRecord({\r\n        score:currentScore,\r\n        category:categoryId,\r\n        userId: localStorage.getItem('sonic_user'),\r\n        artistGuessCorrect: artistGuessCorrect,\r\n        songGuessCorrect: songGuessCorrect,\r\n        avgAnswerTime: 0,\r\n        songsPlayed: songsPlayed\r\n      })\r\n    }\r\n    \r\n    useEffect(() => {\r\n      \r\n    },[])\r\n  \r\n    return(\r\n      \r\n      <div className = 'gameDiv'>\r\n        <Menu style={{ backgroundColor: '', height: 10,     fontSize:20}}>  \r\n          <Menu.Menu position='left'>\r\n            <Menu.Item\r\n              position='left'\r\n              name='leaderboard'\r\n              onClick={()=>history.push('./leaderboard')}\r\n            >\r\n              Leaderboard\r\n            </Menu.Item>\r\n                            \r\n          </Menu.Menu>\r\n            <Menu.Menu position='right'>\r\n            <Menu.Item\r\n                            position='right'\r\n                            name= 'user'\r\n                            onClick={()=>history.push('/stats')}\r\n                        >\r\n                Welcome {currentUserObject.userName}\r\n              </Menu.Item>\r\n              <Menu.Item\r\n                name='logout'\r\n                onClick={handleLogoutClick}\r\n              />\r\n            </Menu.Menu>\r\n        </Menu>\r\n\r\n        <Grid.Row style={{ color: 'white', backgroundColor: '#121212', height: 10, fontSize:35}} >\r\n                    <Header style={{ color: 'white', backgroundColor: '', height: 300, fontSize:45}}textAlign='center'>Can You Hear The Music</Header>\r\n\r\n        </Grid.Row>\r\n        <Grid.Row style={{ color: '', backgroundColor: '#121212', height: 100, fontSize:35}} >\r\n                    <Header style={{ color: 'white', backgroundColor: '', height: 200, fontSize:45}}textAlign='center'></Header>\r\n\r\n        </Grid.Row>\r\n        \r\n        <Grid  textAlign='center' verticalAlign='middle' style={{ backgroundColor: '#121212', }}  >\r\n          <Grid.Column style={{ maxWidth: 900 }}>\r\n\r\n              <Header dividing textAlign='center' centered style = {{backgroundColor: 'white', fontSize:30, height:35}}>You currently have {currentScore} points!</Header>\r\n              <Container fluid style={{ color: 'white', backgroundColor: 'white', height: 50, fontSize:10}}>\r\n              {/* //on game start(triggered by start modal button) start timer// If no game, no timer */}\r\n              {game?\r\n              <Timer endGame = {endGame}\r\n              />\r\n              :\r\n              \"\"}\r\n              </Container>\r\n            <Form size='large'>\r\n              <Segment stacked style={{backgroundColor:'#1DB954'}}>\r\n                <Form.Input\r\n                  focus='true'\r\n                  style={{ color: 'yellow', }}\r\n                  size='big' \r\n                  placeholder='Song Title'\r\n                  name='answerSong'\r\n                  id='answerSong'\r\n                  value={answerState.answerSong}\r\n                  onChange={handleControlledInputChange} \r\n                />\r\n                <Form.Input\r\n                  size='big'\r\n                  placeholder='Artist Name'\r\n                  name='answerArtist'\r\n                  id='answerArtist'\r\n                  value={answerState.answerArtist}\r\n                  onChange={handleControlledInputChange}\r\n                />\r\n                <Button animated\r\n                  size='huge'\r\n                  onClick={event => {\r\n                    event.preventDefault()\r\n                    handleAnswerSubmit()\r\n                  }}>\r\n                <Button.Content visible>Next Song</Button.Content>\r\n                <Button.Content hidden>\r\n                <Icon name='fast forward' />\r\n                </Button.Content>\r\n                </Button>\r\n                <AnswerCard \r\n                songResponse = {songResponse}\r\n                artistResponse = {artistResponse}\r\n              />\r\n              </Segment>\r\n              \r\n            </Form>\r\n          </Grid.Column>\r\n          </Grid>\r\n          {/* //Modal that opens on game start//timer begins after start button pressed//strectch goal, random photos from spotify album covers */}\r\n          <Modal\r\n          size='large'\r\n          onClose={() => setOpen2(false)}\r\n          onOpen={() => setOpen2(true)}\r\n          open={open2}\r\n          \r\n          >\r\n          <Modal.Header>Are You ready?</Modal.Header>\r\n          <Modal.Content image>\r\n            <Image size='large' src={playlistImage} wrapped />\r\n            <Modal.Description>\r\n              <Header style={{ fontSize:30,backgroundColor:\"#1DB954\"}}>{categoryName}</Header>\r\n              <Container style={{ fontSize:15,  }}><Header>{albumWriteup}</Header></Container>\r\n                \r\n            </Modal.Description>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n            <Button\r\n              content=\"Back To Menu\"\r\n              labelPosition='center'\r\n              icon='caret square left'\r\n              color='black'\r\n\r\n              onClick={event=>{\r\n                event.preventDefault()\r\n                setOpen2(false)\r\n                history.push('/')\r\n              }}\r\n                \r\n            />\r\n            \r\n            <Button\r\n              content=\"Play!\"\r\n              labelPosition='right'\r\n              icon='checkmark'\r\n\r\n              onClick={event=>{\r\n                event.preventDefault()\r\n                setOpen2(false)\r\n                getPlaylistAndShuffle().then(startPlayer)\r\n                setGame(true)\r\n                \r\n              }}\r\n                positive\r\n            />\r\n            \r\n            \r\n            </Modal.Actions>\r\n            </Modal>\r\n        \r\n            {/* //Modal on game end//  */}\r\n            <Modal\r\n             onClose={() => setOpen1(false)}\r\n              onOpen={() => setOpen1(true)}\r\n              open={open1}\r\n              \r\n            >\r\n              <Modal.Header ><h2 class=\"ui block blue header\">It's all over now</h2></Modal.Header>\r\n              <Modal.Content image>\r\n                  <Image size='medium' src={currentImage} wrapped />\r\n                <Modal.Description>\r\n                <Header>This is the end</Header>\r\n                <h2 class=\"ui block header\">\r\n                  Your final score is {currentScore}\r\n                </h2>\r\n            </Modal.Description>\r\n              </Modal.Content>\r\n              <Modal.Actions>\r\n                <Button\r\n              content=\"Take me Back\"\r\n              labelPosition='right'\r\n              icon='checkmark'\r\n\r\n              onClick={event=>{\r\n                recordGame()\r\n                setOpen1(false)\r\n                history.push('/')\r\n              }}\r\n              positive\r\n            />\r\n          </Modal.Actions>\r\n          </Modal>\r\n              \r\n          <Grid.Row style={{ color: 'white', backgroundColor: '#121212', height: 300, fontSize:35}} >\r\n                    \r\n\r\n          </Grid.Row>\r\n        {/* spotify react player. it is hidden from view ingame screen */}\r\n        <div>\r\n          <SpotifyPlayer\r\n            token= {localStorage.getItem(\"spotifyAuthToken\")}\r\n            uris={[\"spotify:track:0BM8wPzuihqUE561Poj2b7\", \"spotify:track:4OpB5ExXiVjj1f3gMfTw4u\", \"spotify:track:5i3m1HZBzurdMu9zzjBY7r\"]}\r\n            styles={{\r\n              activeColor: 'black',\r\n              bgColor: 'black',\r\n              color: 'black',\r\n              loaderColor: 'black',\r\n              sliderColor: 'black',\r\n              sliderTrackColor: 'black',\r\n              sliderHandleColor: 'black',\r\n              trackArtistColor: 'black',\r\n              trackNameColor: 'black',\r\n              height: 0,\r\n            }}\r\n          /> \r\n        </div>\r\n        </div>\r\n      \r\n    )\r\n}\r\n\r\n\r\n","import React, { useContext, useEffect } from \"react\"\r\nimport { GameContext } from './GameInformationProvider'\r\nimport { Card, Menu,Grid, Header, Image } from 'semantic-ui-react'\r\nimport './GameSelect.css'\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\n\r\n//present user a series of boxes that represent categories. Each categories will have a unique id. Each unique id will have an associated uri to use for playlist retrieval from spotify.\r\n    export const GameSelect = () => {\r\n\r\n        const history  = useHistory()\r\n        const {getUri, handleLogoutClick, currentUserObject, getCurrentUserObject} = useContext(GameContext)\r\n        const handleCatgoryChoice = (x) => {\r\n            getUri(x)\r\n            history.push(\"/game\")\r\n        }\r\n        //on each render, get current users \r\n        useEffect(() => {\r\n           getCurrentUserObject(localStorage.getItem(\"sonic_user\")) \r\n           console.log(\"First thing I remember knowin', is a lonesome whistle blowin' ,and a yougins dream of growing up to ride. On a freight train leavin' town, not knowin' where Im bound...\");\r\n        },[])\r\n\r\n        return(\r\n            <>\r\n\r\n            <div className = \"selectScreen\">\r\n            \r\n                <Menu style={{ backgroundColor: 'white', height: 10, fontSize:20}}>  \r\n                <Menu.Menu position='left'>\r\n                        <Menu.Item\r\n                            position='left'\r\n                            name='leaderboard'\r\n                            onClick={()=>history.push('./leaderboard')}\r\n                        >\r\n                        Leaderboard\r\n                        </Menu.Item>\r\n                        \r\n                    </Menu.Menu>\r\n                    <Menu.Menu position='right'>\r\n                    <Menu.Item\r\n                            position='right'\r\n                            name= 'user'\r\n                            onClick={()=>history.push('/stats')}\r\n                        >\r\n                        Welcome {currentUserObject.userName}\r\n                        </Menu.Item>\r\n                        <Menu.Item\r\n                            name='logout'\r\n                            onClick={handleLogoutClick}\r\n                        />\r\n                    </Menu.Menu>\r\n                   \r\n                </Menu>\r\n                       \r\n                    \r\n                \r\n                <Grid.Row style={{ color: 'white', backgroundColor: '#222222', height: 100, fontSize:35}} >\r\n                    <Header style={{ color: 'white', backgroundColor: '', height: 200, fontSize:55}}textAlign='center'>Select a Category</Header>\r\n\r\n                </Grid.Row>\r\n            \r\n                <Grid  columns={3} textAlign='center' style={{  backgroundColor: '#222222', height: '', fontSize:20}} >\r\n                    \r\n                    <Grid.Row>\r\n                        <Grid.Column stackable>\r\n                            <Card style={{backgroundColor: '#1db954', height: 380, fontSize:20, }}\r\n                                    centered='true'\r\n                                    stackable='true'\r\n                                    onClick={event => {\r\n                                       handleCatgoryChoice(1)\r\n                                    }}\r\n                                >\r\n                            <Image src='https://i.scdn.co/image/ab67706f00000003a9a72d13a1164e672fe6301f' size='medium' wrapped ui={true} />\r\n                            <Card.Content>\r\n                                <Card.Header>Prime Country</Card.Header>\r\n                            </Card.Content>\r\n                            \r\n                        </Card>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                        <Card style={{backgroundColor: '#1db954',      height: 380, fontSize:20}}\r\n                                    centered='true'\r\n                                    stackable='true'\r\n                                    onClick={event => {\r\n                                       handleCatgoryChoice(2)\r\n                                    }}\r\n                                >\r\n                            <Image src='https://i.scdn.co/image/ab67706c0000bebbad3f7fc6ca71742df49cfd1f' size='medium' wrapped ui={true} />\r\n                            <Card.Content>\r\n                                <Card.Header>Hits of the 90s</Card.Header>\r\n                            </Card.Content>\r\n                            \r\n                        </Card>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                        <Card style={{backgroundColor: '#1db954',      height: 380, fontSize:20, }}\r\n                                    centered='true'\r\n                                    stackable='true'\r\n                                    onClick={event => {\r\n                                       handleCatgoryChoice(3)\r\n                                    }}\r\n                                >\r\n                            <Image src='https://mosaic.scdn.co/640/ab67616d0000b27361e11cce99aab86cb1ce253bab67616d0000b273dc30583ba717007b00cceb25ab67616d0000b273f05e5ac32fdd79d100315a20ab67616d0000b273fc4f17340773c6c3579fea0d' size='medium' wrapped ui={true} />\r\n                            <Card.Content>\r\n                                <Card.Header>Greatest Hits of Classic Rock</Card.Header>\r\n                            </Card.Content>\r\n                            \r\n                        </Card>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row >\r\n                        <Grid.Column>\r\n                        <Card style={{backgroundColor: '#1db954', height: 380, fontSize:20, marginTop: 20,}}\r\n                                    centered='true'\r\n                                    stackable='true'\r\n                                    onClick={event => {\r\n                                       handleCatgoryChoice(4)\r\n                                    }}\r\n                                >\r\n                            <Image src='https://i.scdn.co/image/ab67706f000000035e98bc8db32dc5981d0df665' size='medium' centered backgroundColor = \"black\" wrapped ui={true} />\r\n                            <Card.Content>\r\n                                <Card.Header>Best of the 80s</Card.Header>\r\n                            </Card.Content>\r\n                            \r\n                        </Card>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                        <Card style={{marginTop: 20,backgroundColor: '#1db954', height: 380, fontSize:20}}\r\n                                    centered='true'\r\n                                    stackable='true'\r\n                                    onClick={event => {\r\n                                       handleCatgoryChoice(5)\r\n                                    }}\r\n                                >\r\n                            <Image src='https://i.scdn.co/image/ab67706f00000003ed3a8bb5b72ab5ccbf5834b8' size='medium' wrapped ui={true} />\r\n                            <Card.Content>\r\n                                <Card.Header>The Beatles</Card.Header>\r\n                            </Card.Content>\r\n                            \r\n                        </Card>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                        <Card style={{marginTop: 20,backgroundColor: '#1db954',      height: 380, fontSize:20, }}\r\n                                    centered='true'\r\n                                    stackable='true'\r\n                                    onClick={event => {\r\n                                       handleCatgoryChoice(6)\r\n                                    }}\r\n                                >\r\n                            <Image src='https://i.scdn.co/image/ab67706f00000003b5c1c133dc1d37f8a0eb7acb' size='medium' wrapped ui={true} />\r\n                            <Card.Content>\r\n                                <Card.Header>Classic Country</Card.Header>\r\n                            </Card.Content>\r\n                            \r\n                        </Card>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    </Grid>\r\n                </div>\r\n            </>     \r\n        )\r\n    }\r\n\r\n    \r\n\r\n\r\n","import React from \"react\"\r\nimport {Table} from \"semantic-ui-react\"\r\n\r\n\r\n\r\n// rendor each row of leaderboard\r\nexport function GameCard(game) {\r\n\r\n    console.log(game);\r\n    return(\r\n\r\n            <Table.Row style={{ backgroundColor: '#121212', color:'white'}}>\r\n                <Table.Cell>{game.score}</Table.Cell>\r\n                <Table.Cell>{game.categoryName}</Table.Cell>\r\n                <Table.Cell>{game.userName}</Table.Cell>\r\n            </Table.Row>\r\n    )    \r\n}","import React, { useContext, useEffect } from \"react\"\r\nimport { GameContext } from \"./GameInformationProvider\"\r\nimport {Button, Container,GridColumn,Table, Menu, Grid, Header} from \"semantic-ui-react\"\r\nimport './Leaderboard.css'\r\nimport {GameCard} from './GameCard'\r\nimport './GameSelect.css'\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\n\r\n\r\n    export const Leaderboard = ()=>{\r\n        \r\n        const history  = useHistory()\r\n        const {handleLogoutClick, currentUserObject} = useContext(GameContext)   \r\n        const {getGames, games} = useContext(GameContext)\r\n        let sGames = games.sort((a, b) => (a.score > b.score) ? -1 : 1)\r\n        \r\n        useEffect(() =>{\r\n            getGames()\r\n        },[])\r\n            \r\n        \r\n        return (\r\n            \r\n            <div className = \"leaderDiv\"> \r\n                <Menu style={{ backgroundColor: 'white', height: 10, fontSize:20}}>  \r\n                    <Menu.Menu position='left'>\r\n                        <Menu.Item\r\n                            position='left'\r\n                            name='leaderboard'\r\n                            onClick={()=>history.push('/')}\r\n                        >\r\n                        Game Select\r\n                        </Menu.Item>\r\n                        \r\n                    </Menu.Menu>\r\n                    <Menu.Menu position='right'>\r\n                        <Menu.Item\r\n                            position='right'\r\n                            name= 'user'\r\n                            onClick={()=>history.push('/stats')}\r\n                        >\r\n                        Welcome {currentUserObject.userName}\r\n                        </Menu.Item>\r\n                        <Menu.Item\r\n                            name='logout'\r\n                            onClick={handleLogoutClick}\r\n                        />\r\n                    </Menu.Menu>\r\n                   \r\n                </Menu>\r\n                {/* end of menu code */}\r\n                {/* sort scores in ascedning order.return first 10 aling with associated data  */}\r\n                <Grid style={{  backgroundColor: '#222222',height: '110vh', fontSize:23}}>\r\n                    <GridColumn style={{  backgroundColor: '#222222'}}>\r\n                        <Container >\r\n                            <Header textAlign='center' style={{  backgroundColor: '#222222', color:'white'}} size='huge'>Top 10 scores</Header>\r\n                        <Container >\r\n                            <Table padded singleLine size=\"large\" style={{  backgroundColor: '#222222', color:'white'}}>\r\n                                <Table.Header style={{ backgroundColor: '#222222'}}>\r\n                                    <Table.Row style={{backgroundColor: '#222222'}}>\r\n                                        <Table.HeaderCell width={7} style={{ backgroundColor: '#222222', color:'#1DB954'}}>Score</Table.HeaderCell >\r\n                                        <Table.HeaderCell width={8} style={{ backgroundColor: '#222222', color:'#1DB954'}}>Category</Table.HeaderCell>\r\n                                        <Table.HeaderCell width={8} style={{ backgroundColor: '#222222', color:'#1DB954'}}>Name</Table.HeaderCell>\r\n                                    </Table.Row>\r\n                                 </Table.Header>\r\n\r\n                                <Table.Body style={{backgroundColor: '#222222'}}>\r\n                            \r\n                                {sGames.slice(0,10).map((game) => {\r\n                            \r\n                                return (\r\n                                    <GameCard\r\n                                        key={game}\r\n                                        score={game.score}\r\n                                        id={game.id}\r\n                                        userId={game.userId}\r\n                                        categoryId={game.categoryId}\r\n                                        userName={game.user.userName}\r\n                                        categoryName={game.category.name}\r\n                                    />);\r\n                                })}\r\n                        \r\n                                </Table.Body>\r\n                            </Table>\r\n\r\n                    \r\n                        </Container>\r\n                        <Button     \r\n                            animated='fade'\r\n                            size='massive' \r\n                            attached='bottom' \r\n                            basic color='green'\r\n                            onClick={event => {\r\n                                history.push('/')\r\n                                }}>\r\n                            <Button.Content visible>Back to main menu</Button.Content>\r\n                            <Button.Content hidden>GO!</Button.Content>\r\n                        </Button>\r\n                        </Container>\r\n                    </GridColumn>\r\n                </Grid>\r\n            </div>\r\n            \r\n        )\r\n\r\n\r\n\r\n\r\n\r\n    }","import React, { useContext, useEffect } from \"react\"\r\nimport { GameContext } from \"./GameInformationProvider\"\r\nimport { Container,GridColumn, Header} from \"semantic-ui-react\"\r\nimport './Leaderboard.css'\r\nimport './Stats.css'\r\nimport { Card, Menu,  Grid, } from 'semantic-ui-react'\r\nimport './GameSelect.css'\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\n\r\n\r\n    //simply precessing a bunch of data for a stats page. consider storing all data in object\r\n    export const Stats = ()=>{\r\n        let i=0\r\n        const history  = useHistory()\r\n        const { handleLogoutClick, currentUserObject} = useContext(GameContext)   \r\n        const {getGames, games} = useContext(GameContext)\r\n         \r\n        let usersGames = games.filter((a) => (a.userId === localStorage.getItem(\"sonic_user\")))\r\n        console.log(usersGames);\r\n        //let sGames = games.sort((a, b) => (a.score > b.score) ? -1 : 1)\r\n        let totalGames = usersGames.length\r\n        let totalPoints = usersGames.reduce((a, b) => a + b.score , 0)\r\n        let totalSongs =  usersGames.reduce((a, b) => a + b.songsPlayed, 0)\r\n        let totalCorrectGuesses =  usersGames.reduce((a, b) => a + b.artistGuessCorrect + b.songGuessCorrect, 0)\r\n        let artistCorrectGuesses = usersGames.reduce((a, b) => a + b.artistGuessCorrect , 0)\r\n        let songCorrectGuesses = usersGames.reduce((a, b) => a + b.songGuessCorrect , 0)\r\n        let totalGuessPercentages = Math.trunc(totalCorrectGuesses/(totalSongs*2)*100)\r\n        let songGuessPercentages = Math.trunc(songCorrectGuesses/totalSongs*100)\r\n        let artistGuessPercentages = Math.trunc(artistCorrectGuesses/totalSongs*100)\r\n        let averageScore = usersGames.reduce((a, b) => a + b.score, 0)/(usersGames.length) \r\n        let fAverageScore = averageScore.toFixed(1)\r\n        let sortedByScore =  usersGames?.sort((a, b) => (a.score > b.score) ? -1 : 1)\r\n        let totalAnswers = totalSongs*2\r\n        \r\n        let userHighScore = sortedByScore[0]?.score\r\n        let userHighScoreCategory = sortedByScore[0]?.category.name\r\n        let nums = usersGames.map((a)=>(a.categoryId))\r\n        let mostPlayedCategoryId = topKFrequent(nums,1)\r\n       let mpc = ( usersGames.filter(function(item) {return item.categoryId === mostPlayedCategoryId[0]})\r\n        .map(function(item) {return item.category.name})); \r\n          \r\n        function topKFrequent(nums, k) {\r\n            \r\n            let hash = {}\r\n        \r\n            for (let num of nums) {\r\n                if (!hash[num]) hash[num] = 0\r\n                hash[num]++\r\n            }\r\n        \r\n            const hashToArray = Object.entries(hash)\r\n            const sortedArray = hashToArray.sort((a,b) => b[1] - a[1])\r\n            const sortedElements = sortedArray.map(num => parseInt(num[0]))\r\n            return sortedElements.slice(0, k)\r\n        }\r\n        useEffect(() =>{\r\n            getGames()\r\n        },[])\r\n\r\n        return (\r\n            \r\n            <div className = \"statsDiv\"> \r\n                <Menu style={{ backgroundColor: 'white', height: 10, fontSize:20}}>  \r\n                    <Menu.Menu position='left'>\r\n                        <Menu.Item\r\n                            position='left'\r\n                            name='Select'\r\n                            onClick={()=>history.push('./')}\r\n                        >\r\n                            Game Select\r\n                        </Menu.Item>\r\n                        \r\n                    </Menu.Menu>\r\n                    <Menu.Menu position='right'>\r\n                        <Menu.Item\r\n                            position='right'\r\n                            name= 'user'\r\n                            onClick={()=>history.push('/stats')}\r\n                        >\r\n                            Welcome {currentUserObject.userName}\r\n                        </Menu.Item>\r\n                        <Menu.Item\r\n                            name='logout'\r\n                            onClick={handleLogoutClick}\r\n                        />\r\n                    </Menu.Menu>\r\n                </Menu>\r\n\r\n                <Grid style={{ backgroundColor: '#121212', fontSize:23,}}>\r\n                    <GridColumn>\r\n                        <Container >\r\n                            <Header textAlign='center' style={{  height: 100,color:'#121212'}} ></Header>\r\n                        </Container>\r\n                    </GridColumn>\r\n                </Grid>\r\n                <Grid style={{ backgroundColor: '#121212', }}>\r\n                    <Grid.Column>\r\n                        <Grid.Row >\r\n                            <Card.Group centered>\r\n                                <Card fluid style={{  width: 300, }}>\r\n                                    <Card.Content style={{backgroundColor: \"#1DB954\" , color: 'white'}}><Header textAlign='center'>Games</Header></Card.Content>\r\n                                    <Card.Content><Header textAlign='center'>Total Games Played: {usersGames.length}</Header></Card.Content>\r\n                                    <Card.Content><Header textAlign='center'>Total Points Scored: {totalPoints}</Header></Card.Content>\r\n                                    <Card.Content><Header textAlign='center'>Average Score: {fAverageScore}</Header></Card.Content> \r\n                                </Card>\r\n                                \r\n                                <Card fluid color='black' style={{  width: 300, }}>\r\n                                    <Card.Content color='black' style={{backgroundColor: \"#1DB954\"}}><Header textAlign='center'>Overall</Header></Card.Content>\r\n                                    <Card.Content><Header textAlign='center'>Total Answers: {totalAnswers}</Header></Card.Content>\r\n                                    <Card.Content><Header textAlign='center'>Total Correct Answers: {totalCorrectGuesses}</Header></Card.Content>\r\n                                    <Card.Content><Header textAlign='center'>Total Answer Accuracy:  {totalGuessPercentages} %</Header></Card.Content> \r\n                                </Card>\r\n\r\n                                <Card fluid style={{  width: 300, }}>\r\n                                    <Card.Content style={{backgroundColor: \"#1DB954\"}}><Header textAlign='center'>Songs</Header></Card.Content>\r\n                                    <Card.Content><Header textAlign='center'>Total Songs Played: {totalSongs}</Header></Card.Content>\r\n                                    <Card.Content><Header textAlign='center'>Correct Song Answers: {songCorrectGuesses}</Header></Card.Content>\r\n                                    <Card.Content><Header textAlign='center'>Song Answer Accuracy:  {songGuessPercentages} % </Header></Card.Content> \r\n                                </Card>\r\n\r\n                                <Card fluid style={{  width: 300, }}>\r\n                                    <Card.Content style={{backgroundColor: \"#1DB954\"}}><Header textAlign='center'>Artists</Header></Card.Content>\r\n                                    <Card.Content><Header textAlign='center'>Songs Played: {totalSongs}</Header></Card.Content>\r\n                                    <Card.Content><Header textAlign='center'>Correct Artist Answers: {artistCorrectGuesses}</Header></Card.Content>\r\n                                    <Card.Content><Header textAlign='center'>Artist Answer Accuracy:  {artistGuessPercentages} %</Header></Card.Content> \r\n                                </Card>\r\n\r\n                                <Card fluid style={{  width: 300, }}>\r\n                                    <Card.Content style={{backgroundColor: \"#1DB954\"}}><Header textAlign='center'>Categories</Header></Card.Content>\r\n                                        <Card.Content><Header textAlign='center'>Most Played: {mpc[0]}</Header></Card.Content>\r\n                                    <Card.Content><Header textAlign='center'>Highest Score: {userHighScore} </Header></Card.Content>\r\n                                    <Card.Content><Header textAlign='center'>Best Category: {userHighScoreCategory} </Header></Card.Content> \r\n                                </Card>\r\n                            </Card.Group>\r\n                        </Grid.Row>\r\n                    </Grid.Column>\r\n                </Grid>\r\n               \r\n            </div>\r\n        )\r\n    }\r\n    ","import React from \"react\"\r\nimport { Route } from \"react-router-dom\"\r\nimport {GameInformationProvider} from './game/GameInformationProvider'\r\nimport {GameScreen} from './game/GameScreen'\r\nimport {GameSelect} from './game/GameSelect'\r\nimport { Leaderboard } from \"./game/Leaderboard\"\r\nimport {Stats} from \"./game/Stats\"\r\n\r\n\r\n\r\nexport const ApplicationViews = () => {\r\n    return (\r\n        <>\r\n            <GameInformationProvider>\r\n                <Route exact path=\"/\">\r\n                    <GameSelect />\r\n                </Route>\r\n                <Route exact path=\"/game\">\r\n                    <GameScreen />\r\n                </Route>\r\n                <Route exact path=\"/leaderboard\">\r\n                  <Leaderboard /> \r\n                </Route>\r\n                <Route exact path=\"/stats\">\r\n                  <Stats/> \r\n                </Route>\r\n                <Route exact path=\"/chart\">\r\n                </Route>\r\n            </GameInformationProvider> \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport {Button, Header} from 'semantic-ui-react'\r\n\r\n\r\n//get spotify auth and return token from hash\r\nclass SpotifyAuth extends Component {  \r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      isAuthenticatedWithSpotify: false,\r\n    //   menu: this.props.userId.menu\r\n    };\r\n    this.state.handleRedirect = this.handleRedirect.bind(this);\r\n  };\r\n  generateRandomString(length) {\r\n    let text = '';\r\n    const possible =\r\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (let i = 0; i < length; i++) {\r\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text;\r\n    } \r\n\r\n  getHashParams() {\r\n    const hashParams = {};\r\n    const r = /([^&;=]+)=?([^&;]*)/g;\r\n    const q = window.location.hash.substring(1);\r\n    let e = r.exec(q);\r\n    while (e) {\r\n      hashParams[e[1]] = decodeURIComponent(e[2]);\r\n      e = r.exec(q);\r\n    }\r\n    return hashParams;\r\n  }\r\n\r\n  \r\n  componentDidMount() {\r\n     ////if (this.props.isAuthenticated) {\r\n    const params = this.getHashParams();\r\n    \r\n      console.log(params)\r\n    const access_token = params.access_token;\r\n    console.log('hihihih');\r\n    const state = params.state;\r\n    const storedState = localStorage.getItem('stateKey');\r\n    localStorage.setItem('spotifyAuthToken', access_token);\r\n    //localStorage.getItem('spotifyAuthToken');\r\n    \r\n\r\n    if (window.localStorage.getItem('spotifyAuthToken') && window.localStorage.getItem('spotifyAuthToken') != 'undefined') {\r\n      this.setState({ isAuthenticatedWithSpotify: true });\r\n    };\r\n    if (access_token && (state == null || state !== storedState)) {\r\n      alert('Click \"ok\" to finish authentication with Spotify');\r\n    } else {\r\n      localStorage.removeItem('stateKey');\r\n    }\r\n    \r\n  };\r\n//}\r\n\r\n  handleRedirect(event) {\r\n    event.preventDefault()\r\n    console.log('You linked your Spotify account!', 'success');\r\n\r\n    const params = this.getHashParams();\r\n    const access_token = params.access_token;\r\n    console.log(access_token);\r\n\r\n    const state = this.generateRandomString(16);\r\n    localStorage.setItem('stateKey', state);\r\n\r\n    let url = 'https://accounts.spotify.com/authorize';\r\n    url += '?response_type=token';\r\n    url += '&client_id=' + encodeURIComponent('6129ade14f2c4dbda3511c026bd444ad');\r\n    url += '&scope=' + encodeURIComponent('user-read-private%20streaming%20user-read-email%20streaming%20user-read-email%20user-read-private%20user-read-playback-state%20user-modify-playback-state%20user-library-read%20user-library-modify');\r\n    \r\n    \r\n    //***********************************************************************************************FJKDFHDHFHJKDHFJKHDJKFH */\r\n    ////////////#$%$#%$#$#%^#%^$#$#$  If running local, change to http://localhost:3000/login if heroku change to https://sonicspot.herokuapp.com/login \r\n\r\n    url += '&redirect_uri=' + encodeURIComponent('https://sonicspot.herokuapp.com/login');\r\n    url += '&state=' + encodeURIComponent(state);\r\n    url += '&show_dialog=' + encodeURIComponent(true);\r\n    window.location = url; \r\n  };\r\n  \r\n  render() {\r\n    {return (localStorage.getItem('spotifyAuthToken') && localStorage.getItem('spotifyAuthToken') != 'undefined') ?\r\n    \r\n    <div className=\"button_container\">\r\n          \r\n    <Header style={{fontSize: 50}}className=\"title is-4\"><font color=\"#121212\">You're All Set!</font></Header>\r\n    <div className=\"Line\" /><br/>\r\n    <Button color='green' fluid size='large' type=\"submit\" onClick={event =>  window.location.href='/'}>\r\n    Continue\r\n    </Button>\r\n</div>\r\n\r\n    :\r\n    (\r\n      <div className=\"button_container\">\r\n          \r\n          <Header style={{fontSize: 50}}className=\"title is-4\"><font color=\"#121212\">Please Log In To Your Premium Spotify Account</font></Header>\r\n          <div className=\"Line\" /><br/>\r\n          <Button color='green' fluid size='large' type=\"submit\" onClick={(event) => this.handleRedirect(event)}>\r\n          Sign In To Spotify\r\n          </Button>\r\n      </div>\r\n    )\r\n    }\r\n  }\r\n}\r\nexport default SpotifyAuth;\r\n\r\n","import React, { useState, useRef, useEffect } from \"react\"\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { Button, Form, Grid, Header, Image, Message, Segment, Container } from 'semantic-ui-react'\r\nimport SpotifyAuth from \"./Auth\";\r\n\r\n\r\nexport const Login = props => {\r\n    \r\n    const email = useRef()\r\n    const existDialog = useRef()\r\n    const history = useHistory()\r\n    const [loggedIn, setLoggedIn] = useState('')\r\n    const [spotifyLoggedIn, setSpotifyLoggedIn] = useState('')\r\n\r\n\r\n    const existingUserCheck = () => {\r\n        return fetch(`https://sonicserve.herokuapp.com/users?email=${email.current.value}`)\r\n            .then(res => res.json())\r\n            .then(user => user.length ? user[0] : false)\r\n    }\r\n\r\n    const checkLogged=()=>{\r\n        localStorage.getItem('sonic_user') && localStorage.getItem('sonic_user') != 'undefined' ?\r\n        setLoggedIn(true)\r\n        :\r\n        setLoggedIn(false)\r\n    }\r\n    const checkSpotifyLogged=()=>{\r\n        localStorage.getItem('spotifyAuthToken') && localStorage.getItem('spotifyAuthToken') != 'undefined' ?\r\n        setSpotifyLoggedIn(true)\r\n        :\r\n        setSpotifyLoggedIn(false)\r\n    }\r\n\r\n    const handleLogin = (e) => {\r\n        e.preventDefault()\r\n\r\n        existingUserCheck()\r\n        //if email entered exists in users, set userid as user in local storage and go to select menu if doesnt exist alert user\r\n            .then(exists => {\r\n                if (exists) {\r\n                    localStorage.setItem(\"sonic_user\", exists.id)\r\n                    setLoggedIn(true)\r\n                    history.push('/login')\r\n                } else {\r\n                    existDialog.current.showModal()\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n      checkLogged()\r\n     \r\n    },[loggedIn])\r\n\r\n    return (\r\n        <>    \r\n                <dialog className=\"dialog dialog--auth\" ref={existDialog}>\r\n                    <div>User does not exist</div>\r\n                    <button className=\"button--close\" onClick={e => existDialog.current.close()}>Close</button>\r\n                </dialog>\r\n\r\n                \r\n                    {loggedIn ? (\r\n                        spotifyLoggedIn ? <Button color='green' fluid size='large' type=\"submit\">\r\n                                            Login\r\n                                        </Button>:\r\n\r\n                        <>\r\n                        <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n                        <Grid.Column style={{ maxWidth: 450 }}>\r\n                            <Container>\r\n                                <SpotifyAuth/>\r\n                            </Container>\r\n                            <Header as='h1' color='#121212' textAlign='center'>Can you hear the music?\r\n                            </Header>\r\n                        </Grid.Column>\r\n                        </Grid>\r\n                        </>\r\n                    ) : (\r\n                        <>       \r\n                        <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n                            <Grid.Column style={{ maxWidth: 450 }}>       \r\n                                <Header as='h2' color='#121212' textAlign='center'>\r\n                                Sign in to your account\r\n                                </Header>\r\n                                <Form size='large' onSubmit={handleLogin}>\r\n                                    <Segment stacked>\r\n                            \r\n                                        <input ref={email} \r\n                                            type=\"email\"\r\n                                            id=\"email\" \r\n                                            required autoFocus\r\n                                            fluid icon='user' \r\n                                            iconPosition='left' \r\n                                            placeholder='E-mail address' \r\n                                        />\r\n                                        <Button color='green' fluid size='large' type=\"submit\">\r\n                                        Login\r\n                                        </Button>\r\n                                    </Segment>\r\n                                </Form>\r\n                                <Message>\r\n                                    New to us? <Link to=\"/register\">Sign Up</Link>\r\n                                </Message>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </>\r\n      )\r\n      \r\n      }\r\n                              \r\n       </>)\r\n}             \r\n                \r\n            \r\n              \r\n","import React, { useRef } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nimport {Grid, Form, Segment, Button, Header} from 'semantic-ui-react'\r\n\r\n\r\nexport const Register = (props) => {\r\n    const firstName = useRef()\r\n    const lastName = useRef()\r\n    const email = useRef()\r\n    const verifyPassword = useRef()\r\n    const conflictDialog = useRef()\r\n    const newUser = useRef()\r\n    const history = useHistory()\r\n    const userName = useHistory()\r\n\r\n    const existingUserCheck = () => {\r\n        return fetch(`https://sonicserve.herokuapp.com/users?email=${email.current.value}`)\r\n            .then(res => res.json())\r\n            .then(user => !!user.length)\r\n    }\r\n\r\n\r\n    //create user with first name, lastname, email and userId\r\n    const handleRegister = (e) => {\r\n        e.preventDefault()\r\n\r\n\r\n        existingUserCheck()\r\n            .then((userExists) => {\r\n                if (!userExists) {\r\n                    fetch(\"https://sonicserve.herokuapp.com/users\", {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify({\r\n                            email: email.current.value,\r\n                            name: `${firstName.current.value} ${lastName.current.value}`,\r\n                            userName: userName.current.value\r\n                        })\r\n                    })\r\n                        .then(res => res.json())\r\n                        .then(createdUser => {\r\n                            if (createdUser.hasOwnProperty(\"id\")) {\r\n                                localStorage.setItem(\"sonic_user\", createdUser.id)\r\n                                newUser.current.showModal()\r\n                                \r\n                            }\r\n                        })\r\n                }\r\n                else {\r\n                    conflictDialog.current.showModal()\r\n                }\r\n            })\r\n        \r\n    }\r\n\r\n    return (\r\n        <main style={{ textAlign: \"center\" }}>\r\n            <Grid textAlign='center' style={{ height: '100vh' , width: '500'}}  verticalAlign='middle'>\r\n                <Grid.Column style={{ maxWidth: 700 }}>\r\n                    <Grid.Row >\r\n                    <dialog className=\"dialog dialog--new\" ref={newUser}>\r\n                            <div>User created successfully!</div>\r\n                            <button className=\"button--close\" onClick={e => {\r\n                                newUser.current.close()\r\n                                history.push(\"/login\")\r\n                                }\r\n                                }>Close</button>\r\n                        </dialog>\r\n\r\n                        <dialog className=\"dialog dialog--password\" ref={conflictDialog}>\r\n                            <div>Account with that email address already exists</div>\r\n                            <button className=\"button--close\" onClick={e => conflictDialog.current.close()}>Close</button>\r\n                        </dialog>\r\n\r\n                        <Form style={{ maxWidth: 700 }}size= 'large' className=\"form--login\" onSubmit={handleRegister}>\r\n                            <Segment stacked>\r\n                                <Header>Register New Account</Header> \r\n                        \r\n                                <label htmlFor=\"firstName\"> First Name </label>\r\n                                <input ref={firstName} type=\"text\" name=\"firstName\" className=\"form-control\" placeholder=\"First name\" required autoFocus />\r\n                            \r\n                            \r\n                                <label htmlFor=\"lastName\"> Last Name </label>\r\n                                <input ref={lastName} type=\"text\" name=\"lastName\" className=\"form-control\" placeholder=\"Last name\" required />\r\n                            \r\n                            \r\n                                <label htmlFor=\"inputEmail\"> Email address </label>\r\n                                <input ref={email} type=\"email\" name=\"email\" className=\"form-control\" placeholder=\"Email address\" required />\r\n                            \r\n                            \r\n                                <label htmlFor=\"userName\"> Username </label>\r\n                                <input ref={userName} type=\"text\" name=\"userName\" className=\"form-control\" placeholder=\"Username\" required />\r\n                        \r\n                                <Button color ='green' type=\"submit\"> Sign in </Button>\r\n                        \r\n                            </Segment>\r\n                        </Form>\r\n                    </Grid.Row>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </main>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { ApplicationViews } from \"./ApplicationViews\";\r\nimport { Login } from \"./auth/Login\";\r\nimport { Register } from \"./auth/Register\";\r\nimport \"./SonicSpot.css\";\r\n\r\n\r\nexport const SonicSpot = () => (\r\n\r\n  <>\r\n    <Route\r\n      path='/'\r\n      render={() => {\r\n        if (localStorage.getItem(\"sonic_user\") && localStorage.getItem(\"sonic_user\")!=='undefined') {\r\n          return (\r\n            <>\r\n              <ApplicationViews />\r\n            </>\r\n          );\r\n        } else {\r\n          return <Redirect to=\"/login\" />\r\n        }\r\n      }}\r\n    />\r\n    <Route path=\"/login\">\r\n      <Login />\r\n    </Route>\r\n    <Route path=\"/register\">\r\n      <Register />\r\n    </Route>\r\n  </> \r\n)","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { BrowserRouter as Router } from \"react-router-dom\"\r\nimport { SonicSpot } from './components/SonicSpot';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n            <SonicSpot />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}